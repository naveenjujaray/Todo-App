{"version":3,"sources":["components/ToDo.js","App.js","registerServiceWorker.js","index.js"],"names":["TASK_STATUSES","props","handleChange","name","type","remove","rlist","tasks","map","list","idx","key","className","color","size","onClick","complete","dlist","done","length","text","Home","onChange","event","setState","task","target","value","handleKey","handleClick","state","bind","removeTodo","completeTodo","todo","localStorage","getItem","this","JSON","parse","array","index","indexOf","splice","setItem","stringify","join","slice","push","id","href","placeholder","maxLength","onKeyPress","ToDo","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0503b9e9.chunk.js","sourcesContent":["import React from 'react';\nimport { Check } from 'react-feather';\nimport { X } from 'react-feather';\nimport Emoji from 'react-emoji-render';\n\nexport const TASK_STATUSES = {\n\tTO_DO: 'TO_DO',\n\tDONE: 'DONE'\n};\n\nexport default (props) => {\n\tconst handleChange = (name, type) => {\n\t\tprops.remove(name, type);\n\t};\n\tconst handleDone = (name) => {\n\t\tprops.complete(name);\n\t};\n\tconst rlist = props.tasks.map((list, idx) =>\n\t\t<div key={idx}>\n\t\t\t<li className=\"todo\">{list}</li>\n\t\t\t<Check className=\"check\" color=\"darkgreen\" size={25} onClick={() => handleDone(list)} />\n\t\t\t<X className=\"cross\" color=\"red\" size={25} onClick={() => handleChange(list, TASK_STATUSES.TO_DO)} />\n\t\t</div>\n\t);\n\tconst dlist = props.done.map((done, idx) =>\n\t\t<div key={idx}>\n\t\t\t<li className=\"done\">{done}</li>\n\t\t\t<X className=\"cross\" color=\"red\" size={25} onClick={() => handleChange(done, TASK_STATUSES.DONE)} />\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<ul>{rlist}</ul>\n\t\t\t{props.done.length && <h1>Completed <Emoji text=\"🗸\" /></h1>}\n\t\t\t<ul>{dlist}</ul>\n\t\t</div>\n\t);\n}\n","import React, { Component } from 'react';\nimport ToDo, { TASK_STATUSES } from './components/ToDo';\nimport './css/styles.css';\nimport Emoji from 'react-emoji-render';\n\nexport default class Home extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttask: '',\n\t\t\tlist: ['Check it out in GitHub', 'Made with ❤️ by Alyssa X', 'Try making a new task above 👆', 'Build your own!'],\n\t\t\tdone: []\n\t\t};\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.removeTodo = this.removeTodo.bind(this);\n\t\tthis.completeTodo = this.completeTodo.bind(this);\n\t}\n\tcomponentWillMount() {\n\t\tconst todo = localStorage.getItem('todo');\n\t\tconst done = localStorage.getItem('done');\n\t\tif (todo !== null) {\n\t\t\tthis.setState({ list: JSON.parse(todo) });\n\t\t}\n\t\tif (done !== null) {\n\t\t\tthis.setState({ done: JSON.parse(done) });\n\t\t}\n\t}\n\tonChange = (event) => {\n\t\tthis.setState({ task: event.target.value });\n\t}\n\tremoveTodo(name, type) {\n\t\tlet array, index;\n\t\tswitch (type) {\n\t\t\tcase TASK_STATUSES.TO_DO: {\n\t\t\t\tarray = this.state.list;\n\t\t\t\tindex = array.indexOf(name);\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tthis.setState({ list: array });\n\t\t\t\tlocalStorage.setItem('todo', JSON.stringify(array));\n\t\t\t} break;\n\t\t\tcase TASK_STATUSES.DONE: {\n\t\t\t\tarray = this.state.done;\n\t\t\t\tindex = array.indexOf(name);\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tthis.setState({ done: array });\n\t\t\t\tlocalStorage.setItem('done', JSON.stringify(array));\n\t\t\t} break;\n\t\t\tdefault: {\n\t\t\t\t// nothing\n\t\t\t} break;\n\t\t}\n\t}\n\tcompleteTodo(name) {\n\t\tthis.removeTodo(name, TASK_STATUSES.TO_DO);\n\t\tvar join = this.state.done.slice();\n\t\tjoin.push(name);\n\t\tthis.setState({ done: join });\n\t\tlocalStorage.setItem('done', JSON.stringify(join));\n\t}\n\thandleClick() {\n\t\tif (this.state.task !== '') {\n\t\t\tthis.setState({\n\t\t\t\ttask: '',\n\t\t\t\tlist: [...this.state.list, this.state.task]\n\t\t\t}, () => {\n\t\t\t\tlocalStorage.setItem('todo', JSON.stringify(this.state.list));\n\t\t\t\tlocalStorage.setItem('done', JSON.stringify(this.state.done));\n\t\t\t});\n\t\t}\n\t}\n\thandleKey = (event) => {\n\t\tif (event.key === 'Enter'){\n\t\t\tthis.handleClick();\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header center\">\n\t\t\t\t<h1><a id=\"link\" href=\"https://naveenjujaray.js.org/\">Click here for more knowledge</a></h1>\n\t\t\t\t<h1>Todo List <Emoji text=\"🚦\" /></h1>\n\t\t\t\t<input placeholder=\"Add Task\" maxLength={80} value={this.state.task} type='text' onKeyPress={this.handleKey} task={this.state.task} onChange={this.onChange}/>\n\t\t\t\t<button onClick={this.handleClick}>+</button>\n\t\t\t\t<ToDo tasks={this.state.list} done={this.state.done} remove={this.removeTodo} complete={this.completeTodo}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n<App />,\n   document.getElementById('root')\n   );\nregisterServiceWorker();\n"],"sourceRoot":""}